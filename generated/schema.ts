// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Collection extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("totalTrades", Value.fromBigInt(BigInt.zero()));
    this.set("numberTokensListed", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Collection entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Collection entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Collection", id.toString(), this);
    }
  }

  static load(id: string): Collection | null {
    return changetype<Collection | null>(store.get("Collection", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get totalTrades(): BigInt {
    let value = this.get("totalTrades");
    return value!.toBigInt();
  }

  set totalTrades(value: BigInt) {
    this.set("totalTrades", Value.fromBigInt(value));
  }

  get numberTokensListed(): BigInt {
    let value = this.get("numberTokensListed");
    return value!.toBigInt();
  }

  set numberTokensListed(value: BigInt) {
    this.set("numberTokensListed", Value.fromBigInt(value));
  }

  get nfts(): Array<string> {
    let value = this.get("nfts");
    return value!.toStringArray();
  }

  set nfts(value: Array<string>) {
    this.set("nfts", Value.fromStringArray(value));
  }
}

export class NFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("collection", Value.fromString(""));
    this.set("tokenId", Value.fromBigInt(BigInt.zero()));
    this.set("cid", Value.fromString(""));
    this.set("metadataUrl", Value.fromString(""));
    this.set("creatorAddress", Value.fromBytes(Bytes.empty()));
    this.set("royaltyReceiver", Value.fromBytes(Bytes.empty()));
    this.set("royaltyFraction", Value.fromBigInt(BigInt.zero()));
    this.set("totalTrades", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NFT entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NFT", id.toString(), this);
    }
  }

  static load(id: string): NFT | null {
    return changetype<NFT | null>(store.get("NFT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collection(): string {
    let value = this.get("collection");
    return value!.toString();
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get cid(): string {
    let value = this.get("cid");
    return value!.toString();
  }

  set cid(value: string) {
    this.set("cid", Value.fromString(value));
  }

  get metadataUrl(): string {
    let value = this.get("metadataUrl");
    return value!.toString();
  }

  set metadataUrl(value: string) {
    this.set("metadataUrl", Value.fromString(value));
  }

  get creatorAddress(): Bytes {
    let value = this.get("creatorAddress");
    return value!.toBytes();
  }

  set creatorAddress(value: Bytes) {
    this.set("creatorAddress", Value.fromBytes(value));
  }

  get royaltyReceiver(): Bytes {
    let value = this.get("royaltyReceiver");
    return value!.toBytes();
  }

  set royaltyReceiver(value: Bytes) {
    this.set("royaltyReceiver", Value.fromBytes(value));
  }

  get royaltyFraction(): BigInt {
    let value = this.get("royaltyFraction");
    return value!.toBigInt();
  }

  set royaltyFraction(value: BigInt) {
    this.set("royaltyFraction", Value.fromBigInt(value));
  }

  get totalTrades(): BigInt {
    let value = this.get("totalTrades");
    return value!.toBigInt();
  }

  set totalTrades(value: BigInt) {
    this.set("totalTrades", Value.fromBigInt(value));
  }

  get transactionHistory(): Array<string> {
    let value = this.get("transactionHistory");
    return value!.toStringArray();
  }

  set transactionHistory(value: Array<string>) {
    this.set("transactionHistory", Value.fromStringArray(value));
  }

  get asks(): Array<string> {
    let value = this.get("asks");
    return value!.toStringArray();
  }

  set asks(value: Array<string>) {
    this.set("asks", Value.fromStringArray(value));
  }

  get bids(): Array<string> {
    let value = this.get("bids");
    return value!.toStringArray();
  }

  set bids(value: Array<string>) {
    this.set("bids", Value.fromStringArray(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("numberTokensListed", Value.fromBigInt(BigInt.zero()));
    this.set("numberTokensPurchased", Value.fromBigInt(BigInt.zero()));
    this.set("numberTokensSold", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get numberTokensListed(): BigInt {
    let value = this.get("numberTokensListed");
    return value!.toBigInt();
  }

  set numberTokensListed(value: BigInt) {
    this.set("numberTokensListed", Value.fromBigInt(value));
  }

  get numberTokensPurchased(): BigInt {
    let value = this.get("numberTokensPurchased");
    return value!.toBigInt();
  }

  set numberTokensPurchased(value: BigInt) {
    this.set("numberTokensPurchased", Value.fromBigInt(value));
  }

  get numberTokensSold(): BigInt {
    let value = this.get("numberTokensSold");
    return value!.toBigInt();
  }

  set numberTokensSold(value: BigInt) {
    this.set("numberTokensSold", Value.fromBigInt(value));
  }

  get buyTradeHistory(): Array<string> {
    let value = this.get("buyTradeHistory");
    return value!.toStringArray();
  }

  set buyTradeHistory(value: Array<string>) {
    this.set("buyTradeHistory", Value.fromStringArray(value));
  }

  get sellTradeHistory(): Array<string> {
    let value = this.get("sellTradeHistory");
    return value!.toStringArray();
  }

  set sellTradeHistory(value: Array<string>) {
    this.set("sellTradeHistory", Value.fromStringArray(value));
  }

  get askOrderHistory(): Array<string> {
    let value = this.get("askOrderHistory");
    return value!.toStringArray();
  }

  set askOrderHistory(value: Array<string>) {
    this.set("askOrderHistory", Value.fromStringArray(value));
  }

  get bidOrderHistory(): Array<string> {
    let value = this.get("bidOrderHistory");
    return value!.toStringArray();
  }

  set bidOrderHistory(value: Array<string>) {
    this.set("bidOrderHistory", Value.fromStringArray(value));
  }
}

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("seller", Value.fromBytes(Bytes.empty()));
    this.set("buyer", Value.fromBytes(Bytes.empty()));
    this.set("nft", Value.fromBytes(Bytes.empty()));
    this.set("nftId", Value.fromBigInt(BigInt.zero()));
    this.set("token", Value.fromBytes(Bytes.empty()));
    this.set("price", Value.fromBigInt(BigInt.zero()));
    this.set("start", Value.fromBigInt(BigInt.zero()));
    this.set("end", Value.fromBigInt(BigInt.zero()));
    this.set("salt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Order entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Order entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Order", id.toString(), this);
    }
  }

  static load(id: string): Order | null {
    return changetype<Order | null>(store.get("Order", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value!.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value!.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get nft(): Bytes {
    let value = this.get("nft");
    return value!.toBytes();
  }

  set nft(value: Bytes) {
    this.set("nft", Value.fromBytes(value));
  }

  get nftId(): BigInt {
    let value = this.get("nftId");
    return value!.toBigInt();
  }

  set nftId(value: BigInt) {
    this.set("nftId", Value.fromBigInt(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get start(): BigInt {
    let value = this.get("start");
    return value!.toBigInt();
  }

  set start(value: BigInt) {
    this.set("start", Value.fromBigInt(value));
  }

  get end(): BigInt {
    let value = this.get("end");
    return value!.toBigInt();
  }

  set end(value: BigInt) {
    this.set("end", Value.fromBigInt(value));
  }

  get salt(): BigInt {
    let value = this.get("salt");
    return value!.toBigInt();
  }

  set salt(value: BigInt) {
    this.set("salt", Value.fromBigInt(value));
  }

  get askOrder(): Array<string> {
    let value = this.get("askOrder");
    return value!.toStringArray();
  }

  set askOrder(value: Array<string>) {
    this.set("askOrder", Value.fromStringArray(value));
  }

  get bidOrder(): Array<string> {
    let value = this.get("bidOrder");
    return value!.toStringArray();
  }

  set bidOrder(value: Array<string>) {
    this.set("bidOrder", Value.fromStringArray(value));
  }
}

export class OrderDetails extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("nft", Value.fromString(""));
    this.set("isAskOrder", Value.fromBoolean(false));
    this.set("ask", Value.fromString(""));
    this.set("bid", Value.fromString(""));
    this.set("order", Value.fromString(""));
    this.set("seller", Value.fromString(""));
    this.set("buyer", Value.fromString(""));
    this.set("paynmentTokenDetails", Value.fromString(""));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("priceWithoutDecimals", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("status", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OrderDetails entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save OrderDetails entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("OrderDetails", id.toString(), this);
    }
  }

  static load(id: string): OrderDetails | null {
    return changetype<OrderDetails | null>(store.get("OrderDetails", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nft(): string {
    let value = this.get("nft");
    return value!.toString();
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get isAskOrder(): boolean {
    let value = this.get("isAskOrder");
    return value!.toBoolean();
  }

  set isAskOrder(value: boolean) {
    this.set("isAskOrder", Value.fromBoolean(value));
  }

  get ask(): string {
    let value = this.get("ask");
    return value!.toString();
  }

  set ask(value: string) {
    this.set("ask", Value.fromString(value));
  }

  get bid(): string {
    let value = this.get("bid");
    return value!.toString();
  }

  set bid(value: string) {
    this.set("bid", Value.fromString(value));
  }

  get order(): string {
    let value = this.get("order");
    return value!.toString();
  }

  set order(value: string) {
    this.set("order", Value.fromString(value));
  }

  get seller(): string {
    let value = this.get("seller");
    return value!.toString();
  }

  set seller(value: string) {
    this.set("seller", Value.fromString(value));
  }

  get buyer(): string {
    let value = this.get("buyer");
    return value!.toString();
  }

  set buyer(value: string) {
    this.set("buyer", Value.fromString(value));
  }

  get paynmentTokenDetails(): string {
    let value = this.get("paynmentTokenDetails");
    return value!.toString();
  }

  set paynmentTokenDetails(value: string) {
    this.set("paynmentTokenDetails", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get priceWithoutDecimals(): BigDecimal {
    let value = this.get("priceWithoutDecimals");
    return value!.toBigDecimal();
  }

  set priceWithoutDecimals(value: BigDecimal) {
    this.set("priceWithoutDecimals", Value.fromBigDecimal(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }
}

export class PaymentToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("decimals", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PaymentToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PaymentToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PaymentToken", id.toString(), this);
    }
  }

  static load(id: string): PaymentToken | null {
    return changetype<PaymentToken | null>(store.get("PaymentToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get transaction(): Array<string> {
    let value = this.get("transaction");
    return value!.toStringArray();
  }

  set transaction(value: Array<string>) {
    this.set("transaction", Value.fromStringArray(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("collection", Value.fromString(""));
    this.set("nft", Value.fromString(""));
    this.set("paymentToken", Value.fromString(""));
    this.set("buyer", Value.fromString(""));
    this.set("seller", Value.fromString(""));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collection(): string {
    let value = this.get("collection");
    return value!.toString();
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get nft(): string {
    let value = this.get("nft");
    return value!.toString();
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get paymentToken(): string {
    let value = this.get("paymentToken");
    return value!.toString();
  }

  set paymentToken(value: string) {
    this.set("paymentToken", Value.fromString(value));
  }

  get buyer(): string {
    let value = this.get("buyer");
    return value!.toString();
  }

  set buyer(value: string) {
    this.set("buyer", Value.fromString(value));
  }

  get seller(): string {
    let value = this.get("seller");
    return value!.toString();
  }

  set seller(value: string) {
    this.set("seller", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}
